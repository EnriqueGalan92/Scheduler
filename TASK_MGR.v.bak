module TASK_MGR (
	clk,
	rst,
	entry,
	task_no,
	timer_left
)


// memory_array[i_addr] <= i_data; 

reg [31:0] counter_sec;
reg [7:0] seconds;
reg [7:0] task_info;
reg [3:0] task_no;
reg [3:0] task_timer;
reg [3:0] task_orig;

parameter ADDR_WIDTH = 8;
parameter DATA_WIDTH = 8;
parameter DEPTH = 16;
	 
reg [DATA_WIDTH-1:0] task_array [0:DEPTH-1]; 
reg [DATA_WIDTH-5:0] entry_table [0:DEPTH-1];

initial
begin
	entry_table[0] <= 1'h1;
	entry_table[1] <= 1'h2;
	entry_table[2] <= 1'h3;
	entry_table[3] <= 1'h1;
	entry_table[4] <= 1'h4;
	entry_table[5] <= 1'h2;
	entry_table[6] <= 1'h1;
	entry_table[7] <= 1'h3;
	entry_table[8] <= 1'h1;
	entry_table[9] <= 1'h2;
	entry_table[10] <= 1'h4;
	entry_table[11] <= 1'h1;
	entry_table[12] <= 1'h3;
	entry_table[13] <= 1'h2;
	entry_table[14] <= 1'h1;
	entry_table[15] <= 1'hf;
end

always@(posedge clk or negedge rst)
begin
  if(!rst)
  begin
	 counter_sec	<=	0;
	 seconds 		<= 0;
	 entry_index 	<= 0;
	 task_array[0] <= 8'b00010001;
	 task_array[1] <= 8'b00010001;
	 task_array[2] <= 8'b00100010;
	 task_array[3] <= 8'b00100010;

  end
  else
	 if (counter_sec < 1000000)
		counter_sec	<=	counter_sec+1;
	 else
	 begin
		counter_sec <= 0;
		seconds <= seconds + 1;
	 end
end

always@(seconds)
begin
	task_no <= entry_table[entry_index];
	task_info <= task_array[task_no];
	task_orig <= {task_info[7:4]};
	task_timer <= {task_info[3:0]};
	if (task_timer > 0)
		task_timer <= task_timer - 1;
		// Colocar el timer nuevo
	else
	begin
		entry_index <= entry_index + 1;
		// Assign old timer value to #task
	end
	task_array[task_no] <= {task_orig,task_timer};
end

endmodule
